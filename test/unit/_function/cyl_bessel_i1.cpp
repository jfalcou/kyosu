//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_i1 over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
<typename T>(T )
{
  using e_t = eve::element_type_t<T>;
  if constexpr(sizeof(e_t) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00, -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01, 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00, 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00, 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00, -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00, -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};
    std::array<T, 16> reres{-7.7663478926916039e+00, -1.2939941854695570e+01, -5.3302796682714355e+00, 5.9719589151668284e-01, 1.9477234840183313e+00, 1.0345853150807232e+00, 9.1715728120041307e-02, -1.3252601532703701e-01,1.5169384000359271e-01, 3.6502802882708790e-01, -1.9309671470909062e-01, -1.8559797097918986e+00, -3.3591287128841567e+00, -8.2478634016454500e-01, 9.7166059866485099e+00, 2.2909280737884778e+01};
    std::array<T, 16> imres{2.4051496578757863e+01, -3.4696927580512948e+00, -4.8039150011847722e+00, 3.8527686802723053e+00, -8.9103272670310230e-01, -6.8185707326573963e-01, 8.3915572064640787e-01, -4.6635055250513691e-01, 0.0000000000000000e+00, 6.1416033492290367e-01, -1.2763519411438635e+00, 1.0376469905065817e+00, 1.7026334985345826e+00, -6.8299943890080241e+00, 8.2452497177525110e+00, 6.7817932616967287e+00};

    for(size_t i=0; i < re.size(); ++i)
    {
      auto c = kyosu::complex(re[i], im[i]);
      auto res = kyosu::complex(reres[i], imres[i]);
      TTS_RELATIVE_EQUAL(kyosu::cyl_bessel_i1(c), res, 1.0e-7) << i <<  " <- " << c << '\n';
    }
  }
};

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_i1 over real"
              , kyosu::real_types
              , tts::generate(tts::randoms(-10,10),
                              tts::randoms(-10,10)
                             )
              )
<typename T>(T a0, T a1)
{
  auto c =  kyosu::complex(a0, a1);
  auto cb=  kyosu::conj(c);
  auto cm=  -c;
  auto cr=  kyosu::complex(a0);
  auto ci=  kyosu::complex(T(0), a1);
  using kyosu::cyl_bessel_i1;
  auto i1c = cyl_bessel_i1(c);
  TTS_IEEE_EQUAL(i1c, -cyl_bessel_i1(cm));
  TTS_IEEE_EQUAL(i1c, kyosu::conj(cyl_bessel_i1(cb)));
  TTS_EXPECT(eve::all(kyosu::is_real(cr)));
  TTS_EXPECT(eve::all(kyosu::is_pure(ci)));
  auto z =   kyosu::complex(T(0), T(0));
  TTS_IEEE_EQUAL(cyl_bessel_i1(z), z);
};
