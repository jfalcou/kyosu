//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_j over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 3;
    T v1 = N+0.3;
//    T v2 = N+0.5;
    auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresh1_03{
      vc_t{1.9032786985696645e-05, 1.8981287892177363e+01, 7.3141240532584783e-04, -4.7807170543275561e+01, 6.7103101784997485e-04, -3.4969004805705719e+00, -6.7578628487047057e-02, 1.8525728214375299e+00
          , 6.1981486006106468e-01, 1.8553435828300946e-01, 2.4541127205904174e+00, 1.5460467365953533e-02, -1.2884156857923156e+01, -1.0281891022965268e-03, -1.0056278606589098e+02, -2.3135655369180109e-04}
      , vc_t{-9.0332090766566519e-05, 2.7879750964627203e+02, 3.1199777238059378e-06, 1.3793706260933801e+01, 7.4846505676252140e-03, -5.9815435012498739e+00, 3.2254064022400317e-02, -5.6433253156629437e-01
            , 7.2060978984664459e-02, -1.3818090199016453e-01, 2.6714720617306718e+00, 1.6594169370881449e-02, 1.1638989262035430e+01, 1.9687480858440890e-03, -6.4016734770820932e+01, -9.7727515105153553e-05}
      , vc_t{-9.2553337826896103e-06, -5.7744247463176187e+01, -9.7635699500963182e-04, 2.9249412617892649e+01, -3.4851578641460772e-03, 3.3242452191728895e+00, 1.3491358918201282e-01, -1.3489015376130318e+00
            , 4.7136244726893040e-03, -7.7370823164659230e-01, 2.4287719058589397e-01, -1.7092624506629010e-02, 1.1367188786339970e+01, 1.9406337283165802e-03, 6.2887580860901153e+01, 2.7239172696396534e-04}
      , vc_t{1.3536599185891014e-04, -1.5759464090069665e+02, 4.0093868094707302e-04, -1.5420519662552676e+01, -1.3713159189033911e-02, 6.6923849026047810e-01, -3.3183626448905640e-01, 1.4488031346922172e+00
            , 2.1459626336195470e-04, -1.8251368308969318e+00, -2.4245144025996562e-01, -5.5841656610027948e-02, -9.6719570772608421e-01, -2.3852922008925801e-03, 5.6091938707991247e+01, 2.4533974395801907e-04}
    };

    a_t imresh1_03{
      vc_t{-8.3682864605791601e-05, 3.0422108651291325e+02, 4.2789550191573128e-05, 1.1522825203541837e+01, 6.6037864243277643e-03, -8.0048339680492564e+00, 1.6487716994115165e-02, -1.5823162706255900e+00
          , -1.1783297929294725e+00, -1.4899535423266219e-01, 2.7931518700490159e+00, 1.2616308448392630e-02, 1.4784934625400755e+01, 1.8588731488965930e-03, -6.2800945741686647e+01, -7.9454700238075195e-05}
     , vc_t{-1.6556276216267566e-05, -3.3780712740007004e+01, -8.0204973484533334e-04, 4.1477827169194114e+01, -1.3427013115888870e-03, 3.8598620494047386e+00, 8.5204186216314773e-02, 1.0181321509729335e-03
          , -3.5607044111846555e+00, -3.1426053905874557e-01, -1.3027603798375786e+00, -1.6363879009060292e-02, 1.2755750554351014e+01, 1.2719680740070239e-03, 8.7835544612953015e+01, 2.4404343845258505e-04}
      , vc_t{1.0656323135793355e-04, -2.2614052779095417e+02, 1.1507244275590380e-04, -1.6227063020101276e+01, -9.7099800143490896e-03, 2.7172364434607630e+00, -9.5452228605466719e-02, 3.1652020208302423e-01
            ,-2.9681108437337542e+01,-7.9908173956493134e-02, -1.6126796142990742e+00, -2.8303647615696950e-02, -6.0439413496007548e+00, -2.1891642377602780e-03, 6.3316764578073105e+01, 1.4623676313645434e-04}
      , vc_t{-7.9568663323635163e-06, 7.5482092439868822e+01, 1.2879519695499797e-03, -1.5609528137768914e+01, 9.2434507437373012e-03, -1.9500690532665934e+00, -2.3073523107828342e-01, -5.8521769639205479e+00
            , -4.5154962496132447e+02, 1.9100006717459725e+00, -2.0328961006496751e-01, 1.1174580127907572e-02, -7.9541234546497588e+00, -3.3739246314951339e-03, -3.3678135572473110e+01, -3.1338891759534796e-04}
    };

    a_t reresh2_03{
      vc_t{5.3341177387232847e+02, 1.9937497787605768e-04, -7.2192869118203816e+01, 1.5777270826737061e-03, -1.8231589830794835e+01, -1.1943123448864036e-02, 1.1686219656381118e+00, -2.3208369730828854e-01
          , 6.1981486006106468e-01, 1.8652117334297045e+00, 6.5211528182377104e-02, -3.6037799446401841e-02, 1.2222286440299590e-03, -4.7229950411386277e+01, -6.6833021570213797e-04, -9.0820289359198682e+01}
      , vc_t{4.9571127204838911e+02, -1.7209241761458047e-04, 9.3025753201705655e+01, 1.5661419292606936e-03, -6.0310735526930923e+00, 2.1752635966066379e-02, -2.8261000699945944e+00, -1.6439017132940600e-01
            , 7.2060978984664459e-02, 9.0148261089307757e-01, 1.1889695549944772e-02, 6.9547181252426311e+00, 7.1978478942381803e-03, 2.5171113141809336e+00, 2.3732362310779497e-04, -2.6844166587847371e+02}
      , vc_t{-4.8958307147754340e+02, -2.2385846775095777e-04, 3.5718356056016503e+01, -2.6344589683449859e-03, 1.2304329822097856e+01, 1.1472761279529233e-02, 3.2407187241262714e-01, 1.3175430442312071e+00
            , 4.7136244726893040e-03, 7.4538518903965900e-01, -1.1813927578694577e-01, 2.3607110612802393e+00, 7.2645349202037990e-04, 3.3694318346101447e+01, 9.2326173390467551e-04, 2.6760221549514043e+01}
      , vc_t{-2.1836841422097024e+02, 3.4513496169310024e-04, -6.1819375416850022e+01, -1.5402199014928929e-03, -1.5047211757759491e+00, -6.9727664925856275e-02, 6.1662066980700925e-01, -1.4186702345452828e+00
            , 2.1459626336195470e-04, 1.7684793151745208e+00, -2.2622606747230919e-01, -1.3167547983570442e+00, -1.3596828203824468e-02, 9.7214873460638351e+00, 1.9476488165002278e-05, 1.7850552278710921e+02}
    };

    a_t imresh2_03{
      vc_t{-5.5982932263010957e+02, 1.4992309796631748e-04, -9.7721056447976395e+01, -1.5082512886358355e-03, 9.0471070404638496e+00, -1.7098040846468439e-02, 3.9259467409964861e+00, 1.3457997387157716e-01
          , 1.1783297929294725e+00, -1.4872568814671794e-01, 3.4426947324908697e-04, -8.3092843880835954e+00, -6.3010358135709007e-03, -6.9748324473470351e+00, -2.5743491040417589e-04, 2.8438181124318595e+02}
     , vc_t{5.2245608328665878e+02, 2.0747181122491071e-04, -5.9267863874956127e+01, 1.8622254461236145e-03, -1.6450337815962726e+01, -1.2313474790837494e-02, -5.8790635373108246e-02, -4.1852579394153988e-01
           , 3.5607044111846555e+00, 1.1066688679295096e+00, 8.0235506793506606e-02, -1.1647774047239143e+00, 7.7970235801063216e-04, -4.2978029879918431e+01, -7.4123150695714951e-04, -6.8230562284145378e+01}
      , vc_t{3.6968664387783826e+02, -2.2993228928381017e-04, 8.1118330217658908e+01, 1.6463366850217760e-03, -1.4223717257777464e+00, 3.5668108048791752e-02, -1.0729982609314603e+00, -1.2781068055886546e-01,
            2.9681108437337542e+01, 4.1546782229408002e-01, 6.0100920205562500e-02, 4.1416006223403823e+00, 9.4694082893867076e-03, -4.6211458056434864e+00, 1.6907650843231713e-04, -2.3226238571837516e+02}
      , vc_t{-4.2468546049773511e+02, -2.4086513249537003e-04, 1.1599645338520709e+01, -4.2693375992296084e-03, 7.0102302258432809e+00, 1.1200247102417515e-03, 5.2863899892723776e-01, 5.8459996350552146e+00
            , 4.5154962496132447e+02, -1.8654788114443415e+00, -1.6976992496947202e-01, 2.0553911056026783e+00, 5.0149288977421802e-03, 2.1280591983291032e+01, 1.2564654194961366e-03, -1.6164432459120135e+01}
    };


    std::vector<kyosu::complex_t<T>> h1s_03(N+2), h2s_03(N+2);
    for (n = 0; n <= N; ++n)
    {
      for (int k = 0; k < 16; ++k)
      {
//        std::cout << "n = "<< n << " k = "<< k << std::endl;
        auto c = kyosu::complex(re[k], im[k]);
        kyosu::cyl_bessel_h12(v1, c, std::span(h1s_03), std::span(h2s_03));
        auto refh1_03=  kyosu::complex_t<T>(reresh1_03[n][k], imresh1_03[n][k]);
        auto refh2_03=  kyosu::complex_t<T>(reresh2_03[n][k], imresh2_03[n][k]);
        TTS_RELATIVE_EQUAL(refh1_03, h1s_03[n], 1.e-6) << "n " << n  << " k " << k  << " c "<< c << '\n';
        TTS_RELATIVE_EQUAL(refh2_03, h2s_03[n], 1.e-6) << "n " << n  << " k " << k  << " c "<< c << '\n';
      }
    }
  }
};



TTS_CASE_WITH ( "Check kyosu::cyl_bessel_y over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
<typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00, -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01, 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00, 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00, 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00, -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00, -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};
    std::array<T, 16> reres2_3{-1.8484326865730344e+02, -1.1307014892933245e+02, -4.0559107572608077e+01, -8.1143546783931484e+00, 7.0633087288169860e-01, 1.3407841677059855e+00, 4.8877301616299679e-01, 2.2216544132094485e-01, -2.9681108437337542e+01, -2.4768799812528658e-01, -8.3639026725231835e-01, -2.0849521349780398e+00, -3.0267053789450706e+00, 2.3094783207028629e+00, 3.1658297750782335e+01, 1.1613126597756914e+02};
    std::array<T, 16> imres2_3{-2.4479153111110480e+02, 2.8872011802354219e+01, 1.7859666206505757e+01, -1.4626023538430497e+01, 6.1539074899810009e+00, -1.6563862289466802e+00, 9.4579141615307158e-02, 1.3332222909221194e+00, 0.0000000000000000e+00, 7.5954671034312571e-01, -1.8050823318641987e-01, 1.1889018428934341e+00, -5.6832311664239743e+00, 1.6846188856186565e+01, -3.1443328799583625e+01, 1.3379974578893540e+01};
    std::array<T, 16> reres2_5{-8.7654890991263287e+01, -9.1771669314189324e+01, -4.1717627703885285e+01, -1.1883151237067642e+01, -1.4453741876757213e+00, 5.2384061340744781e-01, 2.0613862369503433e-01, -4.1620643416178454e-01, -4.9302216969951630e+01, -3.8688922030869238e-02, -6.8911084080985185e-01, -2.0568676772290106e+00, -4.0017265312328689e+00, -2.0192640420463226e+00, 2.0900781668534790e+01, 1.0317941425982525e+02};
    std::array<T, 16> imres2_5{-2.8049434280044375e+02, 6.2553746160092665e+01, 2.5324009446864300e+00, -1.0052574585964901e+01, 5.4609192262232265e+00, -1.8129144119062477e+00, 2.5301316433891041e-01, 1.6542434472998313e+00, 0.0000000000000000e+00, 9.2883679082057158e-01, -6.7774302064112446e-02, 6.3146613171915755e-01, -4.3988243107870826e+00, 1.5829229872251211e+01, -3.6798924723120059e+01, 4.2822441814660202e+01};
    std::array<T, 16> reres3_3{2.1234272627043438e+02, 3.7741166652500659e+01, -5.7991786932755796e+00, -7.8026294000848422e+00, -3.5004933875497719e+00, -9.7559453898841753e-01, -3.7968711500276059e-01, -5.8490882994878817e+00, -4.5154962496132447e+02, 1.8877397415951571e+00, -1.6759842547747747e-02, -1.0221082627373854e+00, -3.9795691917737503e+00, -1.0641982953961264e+01, -1.6839696018946302e+01, 8.0820595351012692e+00};
    std::array<T, 16> imres3_3{-1.0918427479348105e+02, 7.8797493017829169e+01, -3.0909888177765485e+01, 7.7094897213255917e+00, -7.4550400829345764e-01, -3.6948307759316718e-01, 4.7422846714803280e-01, -1.4337366846187500e+00, 0.0000000000000000e+00, 1.7968080730357263e+00, 8.1126863938282140e-03, -6.3045657087350815e-01, 4.7679943976112987e-01, 4.8619363191323641e+00, -2.8045959615751542e+01, 8.9252638723682622e+01};
    std::array<T, 16> reres3_5{2.2303495914583851e+02, 5.8843393240988448e+01, 5.2606600172919311e+00, -3.9787131602438528e+00, -2.5801402820432502e+00, -8.2017197341107251e-01, -2.5670790136429888e-01, -6.9043394249229149e+00, -8.1663422761794823e+02, 2.9111931831265583e+00, 1.4481876717491965e-01, -7.1358410680502704e-01, -3.3460060585171023e+00, -1.0493446102766375e+01, -2.1696601638720377e+01, -1.4603760504563096e+01};
    std::array<T, 16> imres3_5{-2.6802178885661171e+01, 5.6272304131655567e+01, -2.8444325156170606e+01, 9.0659750768594716e+00, -1.7706092148284680e+00, 1.0101460672152084e-02, 5.4387090969453589e-01, -4.9599685771513116e+00, 0.0000000000000000e+00, 1.9340464780401485e+00, -1.0451441918509025e-02, -7.0042674192193743e-01, 1.2168812704902807e+00, 1.9449922562939730e+00, -2.1179324864154136e+01, 8.2707766661737594e+01};

    T v1 = 5.3;
    T v2 = 5.5;
    auto n = int(v1);
    std::vector<kyosu::complex_t<T>> h1s_1(n+1), h2s_1(n+1);
    std::vector<kyosu::complex_t<T>> h1s_2(n+1), h2s_2(n+1);
    for (int k = 0; k < 16; ++k)
    {
      auto c = kyosu::complex(re[k], im[k]);
      kyosu::cyl_bessel_jy(v1, c, h1s_1, h2s_1);
      kyosu::cyl_bessel_jy(v2, c, h1s_2, h2s_2);
      auto ref2_3=  kyosu::complex_t<T>(reres2_3[k], imres2_3[k]);
      auto ref2_5=  kyosu::complex_t<T>(reres2_5[k], imres2_5[k]);
      auto ref3_3=  kyosu::complex_t<T>(reres3_3[k], imres3_3[k]);
      auto ref3_5=  kyosu::complex_t<T>(reres3_5[k], imres3_5[k]);
      TTS_RELATIVE_EQUAL(ref2_3, h2s_1[2], 1.e-6) << "k " << k  << " c "<< c << '\n';
      TTS_RELATIVE_EQUAL(ref2_5, h2s_2[2], 1.e-6) << "k " << k  << " c "<< c << '\n';
      TTS_RELATIVE_EQUAL(ref3_3, h2s_1[3], 1.e-6) << "k " << k  << " c "<< c << '\n';
      TTS_RELATIVE_EQUAL(ref3_5, h2s_2[3], 1.e-6) << "k " << k  << " c "<< c << '\n';
    }
  }
};
