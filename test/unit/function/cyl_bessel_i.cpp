//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_i over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 2;
    T v1 = N+0.3;
    auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresi_03{
      vc_t{2.4946103002927494e+01, 1.0281055589440035e+01, -1.1955996056568359e+00, -3.7244789629988131e+00
          , -1.8681466325086200e+00, 5.3651059494096098e-02, 7.5861099866223158e-01, 7.1910702637099910e-01
          , 6.4164623507421747e-01, 8.4603281117851570e-01, 8.8728399491446633e-02, -1.8512237177059714e+00
          , -3.6785403913549906e+00, -1.3149090187159249e+00, 9.5974950027834574e+00, 2.3895446262106674e+01},
      vc_t{-2.3314234836654144e+01, -1.0487582208749537e+01, 4.2957770293599618e-01, 3.2669735099338491e+00
            , 1.8637006674095131e+00, 1.8329466319739901e-01, -4.3951295857717176e-01, -2.6887642660785366e-01
          , 7.3484756949980357e-02, 1.7975463328408453e-01, -3.5042129823656992e-01, -1.8533518623157652e+00
          , -3.1285557845058007e+00, -4.7892306409120167e-01, 9.7762598159581202e+00, 2.2155802276551285e+01},
      vc_t{1.9548998482144881e+01, 1.0535312492927069e+01, 1.0187567542575802e+00, -2.2495401999216877e+00
          , -1.7450918942284412e+00, -6.4192601829985618e-01, -1.1911991238263646e-01, -2.3752735967216422e-02
          , 4.7783415077204501e-03, -6.3552438346782397e-02, -5.3468271578196114e-01, -1.5104323124570009e+00
          , -1.9530537659802314e+00, 9.9546617249995384e-01, 9.6846390655315062e+00, 1.8188390761309609e+01}
    };
    a_t imresi_03{
      vc_t{-7.0149276052284684e+00, -9.1782628874200327e+00, 7.3091253003252543e+00, -1.5804772907430746e+00
          , -1.2814322501402557e+00, 1.2680402389274552e+00, -3.0657941540593403e-01, -3.2113352636255493e-01
          , 0.0000000000000000e+00, 5.9814531708188334e-01, -1.3735420325973586e+00, 1.2830632485422924e+00
          , 1.5124117680691991e+00, -7.0476634635465096e+00, 9.0502640456466512e+00, 5.9241573333129605e+00},
      vc_t{8.4494807341237461e+00, 7.8719861299613019e+00, -6.9898250822721870e+00, 1.9073555698606222e+00
          , 9.0154677032960695e-01, -1.2014977507643358e+00, 6.3768672788713165e-01, -2.2387916947698525e-01
          , 0.0000000000000000e+00, 5.1992632788922155e-01, -1.1238778312383464e+00, 8.3779929222764138e-01
          , 1.8243800819933460e+00, -6.6453413591025576e+00, 7.6464162420697885e+00, 7.3856073352545026e+00},
      vc_t{-1.1016472182122605e+01, -5.1157921018787036e+00, 6.0559440043198070e+00, -2.3353427075393176e+00
          , -1.4693602774918135e-01, 6.9183861748000253e-01, -3.9519426048158079e-01, 8.0801277882578668e-02
          , 0.0000000000000000e+00, 1.5592211409520523e-01, -3.8809489690744248e-01, -5.0541907932195318e-02
          , 2.2087208933325315e+00, -5.5408183115498604e+00, 4.7485267450037423e+00, 9.9139283782970526e+00}
    };

    std::vector<kyosu::complex_t<T>> is_03(N+2);
    for (int k = 0; k < 16; ++k)
    {
      auto vv = T(0.3);
      for (n = 0; n <= N; ++n)
      {
        auto c = kyosu::complex(re[k], im[k]);
        kyosu::cyl_bessel_i(v1, c, std::span(is_03));
        auto refi_03=  kyosu::complex_t<T>(reresi_03[n][k], imresi_03[n][k]);
        TTS_RELATIVE_EQUAL(refi_03, is_03[n], 1.e-6) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_i(vv, c), 1.0e-6);
        vv = eve::inc(vv);
      }
    }
  }
};

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_i over real negative order"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 2;
    T v1 = -(N+0.3);
    //   auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresi_03{
      vc_t{-1.4380046404802016e+01, 5.5541798080859994e+00, 7.3244454439605367e+00, 2.6522954173212079e+00
          , -6.6359729020789593e-01, -1.2694955584311605e+00, -5.2540630793527199e-01, 4.1430962141446614e-01
          , 1.4051056163681339e+00, 8.8529035812787649e-01, 3.5404393354957597e-02, -1.8794568638940121e+00
          , -3.6819270312177155e+00, -1.3110589039585674e+00, 9.6000577725274052e+00, 2.3895907636087493e+01
          },
      vc_t{1.5240691347642432e+01, -4.2436403343172042e+00, -6.7763500079774666e+00, -2.8242576026365951e+00
          , 2.5867390677384927e-01, 1.0275697623534648e+00, 7.0173596360769208e-01, 5.7573866875212931e-01
          , -2.5146777924657853e+00, 1.9557189765798710e-01, -2.7600514394401521e-01, -1.8227800860676147e+00
          , -3.1263485121061172e+00, -4.8349209557374773e-01, 9.7735699295450686e+00, 2.2155396021446258e+01
          },
      vc_t{-1.6518142973740538e+01, 1.6121481005905309e+00, 5.4500940968215765e+00, 2.9185261168313561e+00
          , 3.7703776000347156e-01, -5.4542086751551766e-01, -5.2425645901907181e-01, -6.3084444071100410e-01
          , 2.3198979817738252e+01, -4.0532562457846211e-01, -6.6963346636960686e-01, -1.5441545051728534e+00
          , -1.9514671848301421e+00, 1.0018353556121840e+00, 9.6875697503796392e+00, 1.8188636864408181e+01
          }
        };
    a_t imresi_03{
      vc_t{-2.1556436164764730e+01, 1.2613527501859330e+01, -1.1248236309565378e+00, -3.0432225444274428e+00
          , 2.1630828938131921e+00, -3.7196671367365819e-01, -4.8715688613885944e-01, 5.5439332854984102e-01
          , 0.0000000000000000e+00, 4.0968092575494253e-01, -1.3260993941955419e+00, 1.2915642587590530e+00
          , 1.5000681457777267e+00, -7.0434370194062890e+00, 9.0507107482662423e+00, 5.9230504573834697e+00
          },
      vc_t{1.9563174990580034e+01, -1.2407637703266433e+01, 1.7482912439803879e+00, 2.5292148542057165e+00
            , -2.0646874493435550e+00, 5.1969842679400702e-01, 3.8480271982010844e-01, -6.9659497214144650e-01
          , 0.0000000000000000e+00, 7.9720962750073521e-01, -1.1687795364874578e+00, 8.2372883619713388e-01
          , 1.8383372748471556e+00, -6.6495113610155281e+00, 7.6457254442222089e+00, 7.3868085312383549e+00
          },
      vc_t{-1.5186722499859126e+01, 1.1599258789680089e+01, -2.8429135921064450e+00, -1.4042209433699140e+00
          , 1.6808240268340842e+00, -8.2808235983060585e-01, 4.2446744964722116e-01, -1.3605888350558824e+00
          , 0.0000000000000000e+00, -3.7244812304062941e-01, -3.6801052630246356e-01, -1.9936595522620414e-02
          , 2.1910882976963340e+00, -5.5370532718308612e+00, 4.7498631287408495e+00, 9.9125106921017387e+00
          }
        };
    std::vector<kyosu::complex_t<T>> is_03(N+2);
    for (int k = 0; k < 16; ++k)
    {
      auto c = kyosu::complex(re[k], im[k]);
      kyosu::cyl_bessel_i(v1, c, std::span(is_03));
      auto vv = T(-0.3);
      for (int n = 0; n <= N; ++n)
      {
        auto refi_03 =  kyosu::complex_t<T>(reresi_03[n][k], imresi_03[n][k]);
        auto cbi = kyosu::cyl_bessel_i(vv, c);
        TTS_RELATIVE_EQUAL(refi_03, cbi, 1.0e-6)<< " c "<< c << '\n';
        TTS_RELATIVE_EQUAL(refi_03, is_03[n], 1.e-6) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        vv = eve::dec(vv);
      }
    }
  }
};
