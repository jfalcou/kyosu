//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_y1 over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
<typename T>(T )
{
  using e_t = eve::element_type_t<T>;
  if constexpr(sizeof(e_t) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00, -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01, 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00, 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00, 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00, -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00, -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};
    std::array<T, 16> reres{-1.1635003995960993e+02, 5.3381068215842468e+01, 5.0388421789396631e+01, 2.2597173117969191e+01, 6.0352510091393095e+00, 1.5549628647627789e-01, -8.1910523813119163e-01, -3.0904478519707901e-01, -2.2931051383885306e+00, -6.5769453559134528e-01, -1.9195398533045097e-01, 2.0327376961863122e+00, 8.6682428576348087e+00, 2.0947914457155395e+01, 2.7078359505548676e+01, -2.7914401072754870e+01};
    std::array<T, 16> imres{3.5261743409642776e+02, -1.3532341084651281e+02, 2.7699390907271528e+01, 4.2665556883297704e+00, -7.1500338533314016e+00, 3.9033361244587836e+00, -1.3658668861379402e+00, -9.9598522066041695e-03, 0.0000000000000000e+00, 6.2980100399288452e-01, -1.6135080104078159e+00, 3.1826863536476275e+00, -2.8452340137284344e+00, -8.2421782961768049e+00, 4.9501568913216829e+01, -1.4029142098186119e+02};

    for(int i=0; i < 16; ++i)
    {
      auto c = kyosu::complex(re[i], im[i]);
      auto res = kyosu::complex(reres[i], imres[i]);
      TTS_RELATIVE_EQUAL(kyosu::cyl_bessel_y1(c), res, tts::prec<T>()) << i <<  " <- " << c << '\n';
    }
  }
};


TTS_CASE_WITH ( "Check kyosu::cyl_bessel_y1 over real"
              , kyosu::real_types
              , tts::generate(tts::randoms(-10,10),
                              tts::randoms(-10,10)
                             )
              )
<typename T>(T a0, T a1)
{
  auto c =  kyosu::complex(a0, a1);
  auto cb=  kyosu::conj(c);
  auto cr=  kyosu::complex(a0);
  auto ci=  kyosu::complex(T(0), a1);
  using kyosu::cyl_bessel_y1;
  auto y1c = cyl_bessel_y1(c);
  TTS_IEEE_EQUAL(y1c, kyosu::conj(cyl_bessel_y1(cb)));
  TTS_EXPECT(eve::all(kyosu::is_real(cr)));
  TTS_EXPECT(eve::all(kyosu::is_pure(ci)));
  auto z =   kyosu::complex(T(0), T(0));
  auto minf=   kyosu::complex(eve::minf(eve::as<T>()));
  TTS_IEEE_EQUAL(cyl_bessel_y1(z), minf);
};
