//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_k1 over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
<typename T>(T )
{
  using e_t = eve::element_type_t<T>;
  if constexpr(sizeof(e_t) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00, -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01, 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00, 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00, 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00, -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00, -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};
    std::array<T, 16> reres{-7.5558723336697170e+01, -1.0901783756590387e+01, 1.5082490243488515e+01, 1.2087694612551193e+01, 2.8064705166867476e+00, -2.0364309730027270e+00, -2.3702856960439487e+00, -1.2321752235513028e+00, 3.0559920334573265e+00, 2.4568305523740397e-02, -1.2596578001410641e-01, -5.7496621196871787e-02, -5.3406902773497460e-03, 8.2569869882903046e-03, 5.1186584912694512e-03, 8.3716066698756391e-04};
    std::array<T, 16> imres{-2.4400320472609398e+01, 4.0656258546036412e+01, -1.6748029094651155e+01, -1.8906987893469371e+00, 6.1679526686719459e+00, -3.3016711308793130e+00, 1.4576006614871148e-01, 1.3476064107535497e+00,0.0000000000000000e+00, -4.5971947380118922e-01, 9.0250054265010926e-02, 2.2411626032691864e-02, -2.5739594203717093e-02, 8.1597667029847352e-03, 1.1307863283709636e-03, -2.2528858999184358e-03};

    for(size_t i=0; i < re.size(); ++i)
    {
      auto c = kyosu::complex(re[i], im[i]);
      auto res = kyosu::complex(reres[i], imres[i]);
      TTS_RELATIVE_EQUAL(kyosu::cyl_bessel_k1(c), res, tts::prec<T>(1.0e-3, 1.0e-5));
    }
  }
};

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_k1 over real"
              , kyosu::real_types
              , tts::generate(tts::randoms(-10,10),
                              tts::randoms(-10,10)
                             )
              )
<typename T>(T a0, T a1)
{
  auto c =  kyosu::complex(a0, a1);
  auto cb=  kyosu::conj(c);
  auto cr=  kyosu::complex(a0);
  using kyosu::cyl_bessel_k1;
  auto k1c = cyl_bessel_k1(c);
  auto inf =   kyosu::complex(eve::inf(eve::as<T>()));

  TTS_IEEE_EQUAL(k1c, kyosu::conj(cyl_bessel_k1(cb)));
  TTS_EXPECT(eve::all(kyosu::is_real(cr)));
  auto z =   kyosu::complex(T(0), T(0));
  TTS_IEEE_EQUAL(cyl_bessel_k1(z), inf);
  TTS_IEEE_EQUAL(k1c, cyl_bessel_k1(c));

};
