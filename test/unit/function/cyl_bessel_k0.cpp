//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_k0 over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
<typename T>(T )
{
  using e_t = eve::element_type_t<T>;
  if constexpr(sizeof(e_t) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00, -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01, 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00, 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00, 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00, -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00, -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};
    std::array<T, 16> reres{-7.6426863392141115e+01, -9.0002239400280288e+00, 1.6688121409598665e+01, 1.2406923086087012e+01, 2.2888684274756770e+00, -2.6219327973230624e+00, -2.4999100901074733e+00, -5.2493653524130623e-01, 1.3724600605442980e+00, 8.0197726946517736e-02, -1.0143807229843078e-01, -5.4541055012629798e-02, -6.6883612791388694e-03, 7.3999114785972863e-03, 4.9614711732347619e-03, 9.0129863623049551e-04};
    std::array<T, 16> imres{-2.8619908354383703e+01, 4.2472451857378672e+01, -1.6333205050745224e+01, -2.9368613253804234e+00, 6.7379123108606311e+00, -3.1685626174100103e+00, -4.0163985317199308e-01, 1.7212964277105582e+00, 0.0000000000000000e+00, -3.5727745928533017e-01, 9.2179460261976223e-02, 1.5955542061226579e-02, -2.3792687755670724e-02, 8.2085162874102127e-03, 8.4212686907880188e-04, -2.1389224461818642e-03};

    for(size_t i=0; i < re.size(); ++i)
    {
      auto c = kyosu::complex(re[i], im[i]);
      auto res = kyosu::complex(reres[i], imres[i]);
      TTS_RELATIVE_EQUAL(kyosu::cyl_bessel_k0(c), res, 1.0e-4) << i <<  " <- " << c << '\n';
    }
  }
};

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_k0 over real"
             , kyosu::real_types
             , tts::generate(tts::randoms(-10,10),
                              tts::randoms(-10,10)
                             )
              )
<typename T>(T a0, T a1)
{
  auto c =  kyosu::complex(a0, a1);
  auto cb=  kyosu::conj(c);
  auto cr=  kyosu::complex(a0);
  using kyosu::cyl_bessel_k0;
  auto k0c = cyl_bessel_k0(c);
  auto inf =   kyosu::complex(eve::inf(eve::as<T>()));
  auto z =   kyosu::complex(T(0), T(0));

  TTS_IEEE_EQUAL(k0c, kyosu::conj(cyl_bessel_k0(cb)));
  TTS_EXPECT(eve::all(kyosu::is_real(cr)));
  TTS_IEEE_EQUAL(cyl_bessel_k0(z), inf);
  TTS_IEEE_EQUAL(k0c, cyl_bessel_k0(c));
};
