//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>


TTS_CASE_WITH ( "Check kyosu::cyl_bessel_k over real v =  2.3"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 2;
    T v1 = N+0.3;
    auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresi_03{
      vc_t{-7.6356085800614579e+01, -9.1777541957610591e+00, 1.6542613518775354e+01, 1.2381215528291099e+01
          , 2.3387662997005862e+00, -2.5690360792159450e+00, -2.4930621764042549e+00, -5.9179800603848065e-01
          , 1.4823411623387830e+00, 7.6222886510162097e-02, -1.0353447894367163e-01, -5.4817788296649773e-02
          , -6.5755373416543517e-03, 7.4754253132452942e-03, 4.9759020245597188e-03, 8.9580881413898973e-04},
      vc_t{-7.4858670276675767e+01, -1.2123306468557997e+01, 1.3991108787767311e+01, 1.1826801567594778e+01
          , 3.1163376758999819e+00, -1.6392538522424551e+00, -2.2158615052476724e+00, -1.6399139926251056e+00
          , 5.0252049759614961e+00, -3.0710975110808281e-02, -1.4448722663392172e-01, -5.9358498236853956e-02
          , -4.2856644566998800e-03, 8.8712819627955915e-03, 5.2227131524972374e-03, 7.8878939645721496e-04},
      vc_t{-7.0028359986020078e+01, -1.7325314484522657e+01, 8.6039335006386377e+00, 1.0034374609472982e+01
           , 4.1203503622633431e+00, 1.8737546605673755e-01, -7.8661759114041829e-01, -1.1787359554492010e+00
          , 4.5034117620671751e+01, -6.6359059112780450e-01, -2.6202186702526037e-01, -6.5475381627126655e-02
          , 3.0805234748470314e-03, 1.2366476238369981e-02, 5.6902500521605311e-03, 4.7783649284957982e-04}
    };
    a_t imresi_03{
      vc_t{-2.8233953538916463e+01, 4.2311180773416339e+01, -1.6375448345023578e+01, -2.8400823313968524e+00
          , 6.6879086265570535e+00, -3.1842556027568345e+00, -3.5061121052017286e-01, 1.6999326061984978e+00
          , 0.0000000000000000e+00, -3.6592454260706442e-01, 9.2115150427228051e-02, 1.6505655277180269e-02
          , -2.3966513298980401e-02, 8.2061105972084727e-03, 8.6732273722515746e-04, -2.1491225231985342e-03},
      vc_t{-2.1578471449355344e+01, 3.9375141495795027e+01, -1.6966023116719221e+01, -1.2074088510183536e+00
          , 5.7592731043626317e+00, -3.3418934981593567e+00, 4.9100238158007220e-01, 9.1783022063328734e-01
          , 0.0000000000000000e+00, -5.3837631537993569e-01, 8.7181646569271742e-02, 2.7319352748734618e-02
          , -2.7099439714577039e-02, 8.0965217457305613e-03, 1.3412607263892384e-03, -2.3322553819202355e-03},
      vc_t{-8.0970040511656194e+00, 3.2454127323908530e+01, -1.7278120141267198e+01, 1.8078762957088461e+00
          , 3.5487990981203326e+00, -2.9510953475366790e+00, 1.5914642244066768e+00, -2.7986189543910651e+00
          , 0.0000000000000000e+00, -1.0258894849569298e+00, 3.8996035672480382e-02, 5.9423612418072189e-02
          , -3.4235642328623889e-02, 7.3102426796495309e-03, 2.5947374159400196e-03, -2.7525951662690611e-03}
    };

    std::vector<kyosu::complex_t<T>> ks_03(N+2);
    for (int k = 0; k < 16; ++k)
    {
      auto c = kyosu::complex(re[k], im[k]);
      kyosu::cyl_bessel_k(v1, c, ks_03);
      auto vv = T(-0.3);
      for (n = 0; n <= N; ++n)
      {
         auto refi_03=  kyosu::complex_t<T>(reresi_03[n][k], imresi_03[n][k]);
        TTS_RELATIVE_EQUAL(refi_03, ks_03[n], 1.e-6) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_k(vv, c), 1.e-6);
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_k(-vv, c), 1.e-6);
        vv = eve::dec(vv);
      }
    }
  }
};



TTS_CASE_WITH ( "Check kyosu::cyl_bessel_k over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 0;
    T v1 = N+1.0/3;
    std::cout << "v1 " << v1 << std::endl;
    auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresi_03{
      vc_t{-7.6339268874816966e+01, -9.2192136865580512e+00, 1.6508508118018792e+01, 1.2375096096000567e+01
          , 2.3503760861380147e+00, -2.5566294609268230e+00, -2.4913144969412047e+00, -6.0742679340229055e-01
          , 1.5091129245821360e+00, 7.5263258886450732e-02, -1.0402938701852732e-01, -5.4882419994366216e-02
          , -6.5488350696814700e-03, 7.4931851019796377e-03, 4.9792792996237569e-03, 8.9451308743070568e-04},
    };
    a_t imresi_03{
      vc_t{-2.8143596488672866e+01, 4.2273285530950140e+01, -1.6385214857913763e+01, -2.8174548075889092e+00
          , 6.6761389661094128e+00, -3.1878291715173703e+00, -3.3868350891838195e-01, 1.6945714309783351e+00
          , 0.0000000000000000e+00, -3.6796936276059572e-01, 9.2097126162947351e-02, 1.6635565810036414e-02
          , -2.4007330768135104e-02, 8.2054910688589972e-03, 8.7325515356663085e-04, -2.1515168333318974e-03},
    };

    std::vector<kyosu::complex_t<T>> ks_03(N+2);
    for (int k = 0; k < 16; ++k)
    {
      auto c = kyosu::complex(re[k], im[k]);
      kyosu::cyl_bessel_k(v1, c, ks_03);
      auto vv = T(N+1.0/3);
      for (n = 0; n <= N; ++n)
      {
         auto refi_03=  kyosu::complex_t<T>(reresi_03[n][k], imresi_03[n][k]);
        TTS_RELATIVE_EQUAL(refi_03, ks_03[n], 1.e-6) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_k(vv, c), 1.e-6);

//         auto z = 2*kyosu::pow(c, T(1.5) )/3;
//         std::cout << "c " << c << " z " << z << " -> " << kyosu::cyl_bessel_k(vv, z) << std::endl;
//         vv = eve::dec(vv);
      }
    }
  }
};


TTS_CASE_WITH ( "Check kyosu::cyl_bessel_k over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 0;
    T v1 = N+1.0/3;
    std::cout << "v1 " << v1 << std::endl;
    auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresi_03{
      vc_t{1.1900413043351881e-03, 1.5495899619039162e-03, 9.2313922815213754e-03, 1.4640077997088552e-02, -1.0136111628580130e-02, -1.0257686840586897e-01, -2.1965377035090466e-01, 1.3644035629075407e-02, 7.5455646229106821e-01, -1.5515848980450035e+00, -4.2927833713114696e+00, -4.0556204704598322e+00, 4.7439243146286634e+00, 2.2123510870256215e+01, 2.8376292912481247e+01, -1.8674126596346056e+01},
        };
    a_t imresi_03{
      vc_t{1.6213718228760029e-03, -4.0459476346553763e-03, 1.9336808997634971e-03, 1.4818266297842454e-02, -4.5874488719344970e-02, 3.8478715861459151e-02, 1.5990522343845420e-01, -7.8491087169627471e-01, -3.2078969068337546e+00, 2.4846307644453542e+00, -1.2426224367177374e-01, -5.8516695697616443e+00, 1.1525345800362158e+01, -4.0835724859787863e+00, -3.0165300008239711e+01, 7.4997855427520179e+01}
    };

    std::vector<kyosu::complex_t<T>> ks_03(N+2);
    for (int k = 0; k < 16; ++k)
    {
      auto c = -kyosu::complex(re[k], im[k]);
      kyosu::cyl_bessel_k(v1, c, ks_03);
      auto vv = T(N+1.0/3);
      for (n = 0; n <= N; ++n)
      {
         auto refi_03=  kyosu::complex_t<T>(reresi_03[n][k], imresi_03[n][k]);
        TTS_RELATIVE_EQUAL(refi_03, ks_03[n], 1.e-2) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_k(vv, c), 1.e-2);
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_k(-vv,c), 1.e-2);
      }
    }
  }
};

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_k over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 0;
    T v1 = N-1.0/3;
    std::cout << "v1 " << v1 << std::endl;
    auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresi_03{
      vc_t{-7.6339268874816966e+01, -9.2192136865580512e+00, 1.6508508118018792e+01, 1.2375096096000567e+01, 2.3503760861380147e+00, -2.5566294609268230e+00, -2.4913144969412047e+00, -6.0742679340229055e-01, 1.5091129245821360e+00, 7.5263258886450732e-02, -1.0402938701852732e-01, -5.4882419994366216e-02, -6.5488350696814700e-03, 7.4931851019796377e-03, 4.9792792996237569e-03, 8.9451308743070568e-04},
        };
    a_t imresi_03{
      vc_t{2.8143596488672866e+01, -4.2273285530950140e+01, 1.6385214857913763e+01, 2.8174548075889092e+00, -6.6761389661094128e+00, 3.1878291715173703e+00, 3.3868350891838195e-01, -1.6945714309783351e+00, 0.0000000000000000e+00, 3.6796936276059572e-01, -9.2097126162947351e-02, -1.6635565810036414e-02, 2.4007330768135104e-02, -8.2054910688589972e-03, -8.7325515356663085e-04, 2.1515168333318974e-03}
    };

    std::vector<kyosu::complex_t<T>> ks_03(N+2);
    for (int k = 0; k < 16; ++k)
    {
      auto c = kyosu::complex(re[k], -im[k]);
      kyosu::cyl_bessel_k(v1, c, ks_03);
      auto vv = T(N+1.0/3);
      for (n = 0; n <= N; ++n)
      {
         auto refi_03=  kyosu::complex_t<T>(reresi_03[n][k], imresi_03[n][k]);
        TTS_RELATIVE_EQUAL(refi_03, ks_03[n], 1.e-2) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_k(vv, c), 1.e-2);
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_k(-vv, c), 1.e-2);
      }
    }
  }
};
