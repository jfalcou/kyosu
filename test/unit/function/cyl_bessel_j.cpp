//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_j"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 0;
    T v1 = 1.0/3;
    std::cout << "v1 " << v1 << std::endl;
    auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresi_03{
      vc_t{2.8090373106452773e+02, 1.7536493250871054e+01, -3.3400462158788272e+01, -2.3524142528283910e+01
          , -9.3274540332656208e+00, -1.9656734427524503e+00, 4.3413771695853465e-01, 7.4917804310983560e-01
          , 5.8501480583737409e-01, 1.0213243250718731e+00, 1.3227852389571668e+00, 1.9818890844578396e-01
          , -6.0472153767481238e+00, -2.3374276615174153e+01, -5.1769656721627001e+01, -5.2626473557055462e+01
          }

    };
    a_t imresi_03{
      vc_t{-2.6513665958745401e+02, 1.5122859663021515e+02, -5.0648785179729913e+01, 7.0192828558358924e+00
          , 4.0222943595848140e+00, -3.8995769510156886e+00, 1.9902620949926999e+00, -7.5756275269309670e-01
          , 0.0000000000000000e+00, -1.1158707376004939e-01, 1.3330326497253218e+00, -4.1355677304829221e+00
          , 7.6943469735731851e+00, -4.6838788665148172e+00, -2.8742293351241671e+01, 1.3952363114976131e+02
          }
    };

    std::vector<kyosu::complex_t<T>> is_03(N+2);
    std::vector<kyosu::complex_t<T>> is_03b(N+2);
    for (int k = 0; k < 16; ++k)
    {
      auto c = kyosu::complex(re[k], im[k]);
      kyosu::cyl_bessel_j(v1, c, std::span(is_03));
      kyosu::bessel_j(v1, c, std::span(is_03));
      auto vv = T(N+1.0/3);
      for (n = 0; n <= N; ++n)
      {
         auto refi_03=  kyosu::complex_t<T>(reresi_03[n][k], imresi_03[n][k]);
        TTS_RELATIVE_EQUAL(refi_03, is_03[n], 1.e-2) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        TTS_RELATIVE_EQUAL(refi_03, is_03b[n], 1.e-2) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_j(vv, c), 1.e-2) << "n " << n  << " k " << k  << " c "<< c <<'\n';

      }
    }
  }
};


TTS_CASE_WITH ( "Check kyosu::cyl_bessel_j"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
  <typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {
    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00
        , -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01
        , 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00
        , 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};
    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00
        , 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00
        , -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00
        , -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

    constexpr int N = 0;
    T v1 = -1.0/3;
    std::cout << "v1 " << v1 << std::endl;
    auto n = int(v1);
    using vc_t = std::array<T, 16>;
    using a_t = std::array<vc_t, N+1>;
    a_t reresi_03{
      vc_t{-8.9163143837610050e+01, -1.2219942089268812e+02, -6.0563369116851803e+01, -1.7842181975937766e+01
          , -1.1860080210885884e+00, 2.3789187887624883e+00, 1.9232059348460351e+00, 1.1368224659946016e+00
          , 1.3432948699326057e+00, 5.5139655214064687e-01, -4.8990051277299940e-01, -3.4926635951494012e+00
          , -9.6925116789155155e+00, -1.5745152038061331e+01, -9.9352493046059109e-01, 9.4517830645215696e+01
          }
    };
    a_t imresi_03{
      vc_t{-3.7583808427575212e+02, 9.0801181249849066e+01, 3.6018913915299962e+00, -1.6864299541716473e+01
          , 1.0089846321224439e+01, -3.6425542565379301e+00, 5.6128150602785309e-01, 4.7851915025080155e-01
          , 0.0000000000000000e+00, -7.8534132361994757e-01, 1.7555311861860581e+00, -2.2254640329062294e+00
          , -1.3912074018251386e+00, 1.7899970399493917e+01, -5.9204417397002132e+01, 1.1533747474469016e+02
          }
    };

    std::vector<kyosu::complex_t<T>> is_03(N+2);
    for (int k = 0; k < 16; ++k)
    {
      auto c = kyosu::complex(re[k], im[k]);
      kyosu::cyl_bessel_j(v1, c, std::span(is_03));
      auto vv = -T(N+1.0/3);
      for (n = 0; n <= N; ++n)
      {
         auto refi_03=  kyosu::complex_t<T>(reresi_03[n][k], imresi_03[n][k]);
        TTS_RELATIVE_EQUAL(refi_03, is_03[n], 1.e-2) << "n " << n  << " k " << k  << " c "<< c << " arg(c) "<< kyosu::arg(kyosu::conj(c)) << " < 1.57" << '\n';
        TTS_RELATIVE_EQUAL(refi_03,  kyosu::cyl_bessel_j(vv, c), 1.e-2);
      }
    }
  }
};
