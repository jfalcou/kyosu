//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <kyosu/kyosu.hpp>
#include <test.hpp>

TTS_CASE_WITH ( "Check kyosu::cyl_bessel_jn over real"
              , kyosu::scalar_real_types
              , tts::generate(tts::randoms(-10,10))
              )
<typename T>(T )
{
  if constexpr(sizeof(T) == 8)
  {

    std::array<T, 16> re{-5.2999999999999998e+00, -4.5999999999999996e+00, -3.8999999999999999e+00, -3.2000000000000002e+00, -2.5000000000000000e+00, -1.7999999999999998e+00, -1.1000000000000005e+00, -4.0000000000000036e-01, 2.9999999999999982e-01, 1.0000000000000000e+00, 1.7000000000000002e+00, 2.3999999999999995e+00, 3.0999999999999988e+00, 3.7999999999999998e+00, 4.4999999999999991e+00, 5.2000000000000002e+00};

    std::array<T, 16> im{8.0000000000000000e+00, -7.0000000000000000e+00, 6.0000000000000000e+00, -5.0000000000000000e+00, 4.0000000000000000e+00, -3.0000000000000000e+00, 2.0000000000000000e+00, -1.0000000000000000e+00, -0.0000000000000000e+00, 1.0000000000000000e+00, -2.0000000000000000e+00, 3.0000000000000000e+00, -4.0000000000000000e+00, 5.0000000000000000e+00, -6.0000000000000000e+00, 7.0000000000000000e+00};

std::array<T, 16> reres{9.1105158918418851e+00, 1.3520681783686308e+01, 5.1996157906116176e+00, -9.3955732595530583e-01, -2.1592215730366595e+00, -1.0203442510225200e+00, 1.7928053786055054e-01, 7.9145564123437862e-01, 1.0226268793515969e+00, 9.3760847680602921e-01, 9.6892664556561592e-02, -1.8654535569280768e+00, -3.7136415921698247e+00, -1.3637442303665379e+00, 9.5845168576745756e+00, 2.3992713926047784e+01};

std::array<T, 16> imres{-2.4327050976845694e+01, 2.8653583146189998e+00, 5.3090647906716306e+00, -3.9446445638917211e+00, 7.3190429239585508e-01, 8.0207883753193920e-01, -7.2760910016154035e-01, 1.7951149535253691e-01, 0.0000000000000000e+00, 4.9652994760912211e-01, -1.3484619725848805e+00, 1.3085405635612335e+00, 1.4854842997435447e+00, -7.0649726353849376e+00, 9.1307990856050161e+00, 5.8349474258307366e+00};

// std::array<T, 16> reres10{7.2096780060754961e-01, 1.1052133111606181e-01, 3.1437370175592463e-03, -2.4723202156997602e-03, -4.7293794448343297e-04, -2.7896119603828976e-05, -2.0739912894830789e-07, 4.4304844373647224e-10,1.5923473578552213e-15, -3.9133464867901946e-10, -3.3501656767750857e-06, -1.7429941587485191e-04, -2.5100400727858961e-03, -1.6418736619841605e-02, -5.0700496067984643e-02, 1.3224133631162732e-02};

// std::array<T, 16> imres10{5.7916720018499834e-01, -2.4126888311913855e-01, 6.1676272191232950e-02, -1.0372626676994788e-02, 1.0857028775833849e-03, -5.8692616087497892e-05, 9.4740127725668645e-07, -3.3350577631464458e-10,0.0000000000000000e+00, 8.6035082077564487e-09, -2.3260671692032776e-06, 2.3687853381792524e-05, 6.6738984517224101e-04, -1.2820769685200642e-02, 1.0082810042615270e-01, -4.6684296961057775e-01};

    for(int i=0; i < 16; ++i)
    {
      auto c = kyosu::complex(re[i], im[i]);
      auto res = kyosu::complex(reres[i], imres[i]);
      TTS_RELATIVE_EQUAL(kyosu::cyl_bessel_in(0, c), res, 1.0e-7) << i <<  " <- " << c << '\n';
    }
  }
};


// TTS_CASE_WITH ( "Check kyosu::cyl_bessel_jn over real"
//               , kyosu::real_types
//               , tts::generate(tts::randoms(-10,10),
//                               tts::randoms(-10,10)
//                              )
//               )
// <typename T>(T a0, T a1)
// {
//   using u_t = eve::underlying_type_t<T>;
//   auto c =  kyosu::complex(a0, a1);
//   auto cb=  kyosu::conj(c);
//   auto cm=  -c;
//   auto cr=  kyosu::complex(a0);
//   auto ci=  kyosu::complex(T(0), a1);
//   auto zer =   kyosu::complex(T(0), T(0));
//   auto one =   kyosu::complex(T(1), T(0));

//   using kyosu::cyl_bessel_jn;

//   for(int i=0; i < 10 ; ++i)
//   {
//     auto jnc = cyl_bessel_jn(i, c);
//     TTS_IEEE_EQUAL(jnc, eve::sign_alternate(u_t(i))*cyl_bessel_jn(i, cm)) << "c " << c << "\n";
//     TTS_IEEE_EQUAL(jnc, kyosu::conj(cyl_bessel_jn(i, cb)));
//     TTS_EXPECT(eve::all(kyosu::is_real(cr)));
//     TTS_EXPECT(eve::all(kyosu::is_pure(ci)));
//     TTS_IEEE_EQUAL(cyl_bessel_jn(i, zer), i ? zer : one) << "i " << i << '\n';
//     TTS_IEEE_EQUAL(jnc, eve::sign_alternate(u_t(i))*cyl_bessel_jn(-i, c)) << i << '\n';
//   }
// };
