//======================================================================================================================
/*
  Kyosu - Complex Without Complexes
  Copyright : KYOSU Contributors & Maintainers
  SPDX-License-Identifier: BSL-1.0
*/
//======================================================================================================================
#include <iomanip>
#include <kyosu/kyosu.hpp>
#include <test.hpp>
#include <eve/wide.hpp>
#include <iostream>


TTS_CASE_TPL ( "Check tricomi "
             , kyosu::scalar_real_types
             )
  <typename T>(tts::type<T>)
{
    using r_t = kyosu::cayley_dickson<T, 2>;

    auto test = [](auto z, auto a,  auto b, auto ref,  auto i){
      auto pr = tts::prec<T>(4.0e-3, 1.0e-9);
      auto r = kyosu::tricomi(r_t(z), r_t(a), r_t(b));
      TTS_RELATIVE_EQUAL(r, ref, pr) <<  "i " << i << " z " <<  z << " a " << a <<  " b " << b <<  "\n";
    };

    r_t res[] = {r_t(-0.670482709790073, -0.425168331587636328),  //0
                 r_t(0.3579320986822610, 0.0),                    //1
                 r_t(0.03975864510496, -0.2125841657938181642),   //2
                 r_t(-0.1131470204734, -0.0001426280858153150162),//3
                 r_t(0.596347362323194, 0.0),                     //4
                 r_t(10.93582915778848, 0.0),                     //5
                 r_t(-0.2707662554910, -0.021167884792604296731), //6
                 r_t(0.181761874151898, 0.0),                     //7
                 r_t(0.680920590299878, 0.0),                     //8
                 r_t(0.277406605653042, 0.0),                     //9
                 r_t(0.138671383111777, 0.0),                     //10
                 r_t(-0.05491954836832, 0.070861388597939388073), //11
                 r_t(0.263649601604, 0.063890574166552),          //12
                 r_t(0.4213692292880, 0.0),                       //13
                 r_t(0.075192911520, 0.0),                        //14
                 r_t(0.010338915008, 0.08232684012981332521971),  //15
                 r_t(4.4195931497672e18, -1.1367863689312e19),    //16
    };
    r_t I = r_t(0.0, 1.0);

    test(-2.0, 1.0, 1.0, res[0], 0);
    test(1.0, 1.5, 1.0, res[1], 1);
    test(-2.0, 3.0, 3.0, res[2], 2);
    test(1.0, 1.0, 1.0, res[4], 4);
    test(1.0e-5, 1.0, 1.0, res[5], 5);
    test(-5.0, 1.0, 1.0, res[6], 6);
    test(-10.0, 1.0, 1.0, res[3], 3);
    test(2.0, 1.5, 1.0, res[7], 7);
    test(1.0, 1.5, 2.0, res[8], 8);
    test(2.0, 1.5, 2.0, res[9], 9);
    test(2.0, 2.0, 2.0, res[10], 10);
    test(-2.0, 4.0, 4.0, res[11], 11);
    test(2.0, 1, I, res[12], 12);
    test(2.0, 1.0, 1.5, res[13], 13);
    test(0.5, 2.0, -1.4, res[14], 14);
    test(0.5, 1.0, 12*I, res[15], 15);
    test(0.4-1.2*I, -20.4, -20.4, res[16], 16);

};
